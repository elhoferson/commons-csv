/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.csv.printer;

import org.apache.commons.csv.format.CSVFormat;
import org.apache.commons.csv.format.CSVFormatPredefinedFormats;
import org.apache.commons.csv.format.QuoteMode;
import org.apache.commons.csv.parser.CSVParser;
import org.apache.commons.csv.parser.ICSVParser;
import org.apache.commons.csv.record.CSVRecord;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Date;
import java.util.Iterator;

import static org.apache.commons.csv.Constants.CR;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Tests {@link CSVPrinter}.
 */
public class CSVPrinterTest extends AbstractCSVPrinterTest {

    private static final char EURO_CH = '\u20AC';

    private CSVPrinter printWithHeaderComments(final StringWriter sw, final Date now, final CSVFormat baseFormat)
            throws IOException {
        // Use withHeaderComments first to test CSV-145
        // @formatter:off
        final CSVFormat format = baseFormat.copy();
        format.setHeaderComments("Generated by Apache Commons CSV 1.1", now);
        format.setCommentMarker('#');
        format.setHeader("Col1", "Col2");

        // @formatter:on
        final CSVPrinter csvPrinter = new CSVPrinter(sw, format);
        csvPrinter.printRecord("A", "B");
        csvPrinter.printRecord("C", "D");
        csvPrinter.close();
        return csvPrinter;
    }

    @Test
    public void testCRComment() throws IOException {
        final StringWriter sw = new StringWriter();
        final Object value = "abc";
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setCommentMarker('#');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print(value);
            printer.printComment("This is a comment\r\non multiple lines\rthis is next comment\r");
            assertEquals("abc" + recordSeparator + "# This is a comment" + recordSeparator + "# on multiple lines"
                        + recordSeparator + "# this is next comment" + recordSeparator + "# " + recordSeparator, sw.toString());
        }
    }

    @Test
    public void testDisabledComment() throws IOException {
        final StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormatPredefinedFormats.Default.getFormat())) {
            printer.printComment("This is a comment");
            assertEquals("", sw.toString());
        }
    }

    @Test
    public void testDontQuoteEuroFirstChar() throws IOException {
        final StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormatPredefinedFormats.RFC4180.getFormat())) {
            printer.printRecord(EURO_CH, "Deux");
            assertEquals(EURO_CH + ",Deux" + recordSeparator, sw.toString());
        }
    }

    @Test
    public void testEolEscaped() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        format.setEscapeCharacter('!');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("a\rb\nc");
            printer.print("x\fy\bz");
            assertEquals("a!rb!nc,x\fy\bz", sw.toString());
        }
    }

    @Test
    public void testEolPlain() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("a\rb\nc");
            printer.print("x\fy\bz");
            assertEquals("a\rb\nc,x\fy\bz", sw.toString());
        }
    }

    @Test
    public void testEolQuoted() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter('\'');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("a\rb\nc");
            printer.print("x\by\fz");
            assertEquals("'a\rb\nc',x\by\fz", sw.toString());
        }
    }



    @Test
    public void testHeader() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        format.setHeader("C1", "C2", "C3");
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", "b", "c");
            printer.printRecord("x", "y", "z");
            assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString());
        }
    }

    @Test
    public void testHeaderCommentExcel() throws IOException {
        final StringWriter sw = new StringWriter();
        final Date now = new Date();
        final CSVFormat format = CSVFormatPredefinedFormats.Excel.getFormat();
        try (final CSVPrinter csvPrinter = printWithHeaderComments(sw, now, format)) {
            assertEquals("# Generated by Apache Commons CSV 1.1\r\n# " + now + "\r\nCol1,Col2\r\nA,B\r\nC,D\r\n",
                    sw.toString());
        }
    }

    @Test
    public void testHeaderCommentTdf() throws IOException {
        final StringWriter sw = new StringWriter();
        final Date now = new Date();
        final CSVFormat format = CSVFormatPredefinedFormats.TDF.getFormat();
        try (final CSVPrinter csvPrinter = printWithHeaderComments(sw, now, format)) {
            assertEquals("# Generated by Apache Commons CSV 1.1\r\n# " + now + "\r\nCol1\tCol2\r\nA\tB\r\nC\tD\r\n",
                    sw.toString());
        }
    }

    @Test
    public void testHeaderNotSet() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", "b", "c");
            printer.printRecord("x", "y", "z");
            assertEquals("a,b,c\r\nx,y,z\r\n", sw.toString());
        }
    }

    @Test
    public void testInvalidFormat() {
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        assertThrows(IllegalArgumentException.class, () -> format.setDelimiter(CR));
    }



    @Test
    public void testMultiLineComment() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setCommentMarker('#');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printComment("This is a comment\non multiple lines");

            assertEquals("# This is a comment" + recordSeparator + "# on multiple lines" + recordSeparator,
                    sw.toString());
        }
    }


    @Test
    public void testNewCsvPrinterAppendableNullFormat() {
        assertThrows(NullPointerException.class, () -> new CSVPrinter(new StringWriter(), null));
    }

    @Test
    public void testNewCsvPrinterNullAppendableFormat() {
        assertThrows(NullPointerException.class, () -> new CSVPrinter(null, CSVFormatPredefinedFormats.Default.getFormat()));
    }

    @Test
    public void testNotFlushable() throws IOException {
        final Appendable out = new StringBuilder();
        try (final CSVPrinter printer = new CSVPrinter(out, CSVFormatPredefinedFormats.Default.getFormat())) {
            printer.printRecord("a", "b", "c");
            assertEquals("a,b,c" + recordSeparator, out.toString());
            printer.flush();
        }
    }

    @Test
    public void testParseCustomNullValues() throws IOException {
        final StringWriter sw = new StringWriter();
        final CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setNullString("NULL");
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", null, "b");
        }
        final String csvString = sw.toString();
        assertEquals("a,NULL,b" + recordSeparator, csvString);
        try (final ICSVParser iterable = new CSVParser(new StringReader(csvString), format)) {
            final Iterator<CSVRecord> iterator = iterable.iterator();
            final CSVRecord record = iterator.next();
            assertEquals("a", record.get(0));
            assertNull(record.get(1));
            assertEquals("b", record.get(2));
            assertFalse(iterator.hasNext());
        }
    }

    @Test
    public void testPlainEscaped() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        format.setEscapeCharacter('!');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("abc");
            printer.print("xyz");
            assertEquals("abc,xyz", sw.toString());
        }
    }

    @Test
    public void testPlainPlain() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("abc");
            printer.print("xyz");
            assertEquals("abc,xyz", sw.toString());
        }
    }

    @Test
    public void testPlainQuoted() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter('\'');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("abc");
            assertEquals("abc", sw.toString());
        }
    }


    @Test
    public void testQuoteAll() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteMode(QuoteMode.ALL);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", "b\nc", "d");
            assertEquals("\"a\",\"b\nc\",\"d\"" + recordSeparator, sw.toString());
        }
    }

    @Test
    public void testQuoteCommaFirstChar() throws IOException {
        final StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormatPredefinedFormats.RFC4180.getFormat())) {
            printer.printRecord(",");
            assertEquals("\",\"" + recordSeparator, sw.toString());
        }
    }

    @Test
    public void testQuoteNonNumeric() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteMode(QuoteMode.NON_NUMERIC);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", "b\nc", Integer.valueOf(1));
            assertEquals("\"a\",\"b\nc\",1" + recordSeparator, sw.toString());
        }
    }

    @Test
    public void testSingleLineComment() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setCommentMarker('#');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printComment("This is a comment");
            assertEquals("# This is a comment" + recordSeparator, sw.toString());
        }
    }

    @Test
    public void testSingleQuoteQuoted() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter('\'');
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print("a'b'c");
            printer.print("xyz");
            assertEquals("'a''b''c',xyz", sw.toString());
        }
    }

    @Test
    public void testSkipHeaderRecordFalse() throws IOException {
        // functionally identical to testHeader, used to test CSV-153
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        format.setHeader("C1", "C2", "C3");
        format.setSkipHeaderRecord(false);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", "b", "c");
            printer.printRecord("x", "y", "z");
            assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString());
        }
    }

    @Test
    public void testSkipHeaderRecordTrue() throws IOException {
        // functionally identical to testHeaderNotSet, used to test CSV-153
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setQuoteCharacter(null);
        format.setHeader("C1", "C2", "C3");
        format.setSkipHeaderRecord(true);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("a", "b", "c");
            printer.printRecord("x", "y", "z");
            assertEquals("a,b,c\r\nx,y,z\r\n", sw.toString());
        }
    }

    @Test
    public void testTrailingDelimiterOnTwoColumns() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setTrailingDelimiter(true);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.printRecord("A", "B");
            assertEquals("A,B,\r\n", sw.toString());
        }
    }

    @Test
    public void testTrimOffOneColumn() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setTrim(false);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print(" A ");
            assertEquals("\" A \"", sw.toString());
        }
    }

    @Test
    public void testTrimOnOneColumn() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setTrim(true);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print(" A ");
            assertEquals("A", sw.toString());
        }
    }

    @Test
    public void testTrimOnTwoColumns() throws IOException {
        final StringWriter sw = new StringWriter();
        CSVFormat format = CSVFormatPredefinedFormats.Default.getFormat();
        format.setTrim(true);
        try (final CSVPrinter printer = new CSVPrinter(sw, format)) {
            printer.print(" A ");
            printer.print(" B ");
            assertEquals("A,B", sw.toString());
        }
    }

}
